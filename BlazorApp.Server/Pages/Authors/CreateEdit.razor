@page "/author/create"
@page "/author/edit/{id:int}"

@attribute [Authorize(Roles = Roles.Admins)]

@inject IAuthorService _service
@inject NavigationManager _navigationManager

<h3>@(Id > 0 ? "Edit" : "Create")</h3>

@if (!string.IsNullOrEmpty(_message))
{
    <p class="text-danger">@_message</p>
}

<EditForm Model="_model" OnValidSubmit="submit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label class="form-label">First Name</label>
        <InputText class="form-control" @bind-Value="_model.FirstName" />
        <ValidationMessage For="@(()=>_model.FirstName)" />
    </div>

    <div class="mb-3">
        <label class="form-label">Last Name</label>
        <InputText class="form-control" @bind-Value="_model.LastName" />
        <ValidationMessage For="@(()=>_model.LastName)" />
    </div>

    <div class="mb-3">
        <label class="form-label">Bio</label>
        <InputTextArea class="form-control" @bind-Value="_model.Bio" />
        <ValidationMessage For="@(()=>_model.Bio)" />
    </div>

    <div class="mb-3">
        <button type="submit" class="btn btn-primary" disabled="@(_busy)">
            @if (_busy)
            {
                <div class="spinner-border spinner-border-sm text-light" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            }
            Submit
        </button>
        <button class="btn btn-light" @onclick="backToList">
            <span class="oi oi-media-skip-backward" aria-hidden="true"></span>
            Back to list
        </button>
    </div>
</EditForm>

@code {
    private AuthorCreateEditDto _model = new();
    private string _message = string.Empty;
    private bool _busy = false;

    [Parameter] public int Id { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        if (Id > 0)
        {
            var response = await _service.GetById(Id);
            if (response.Success)
            {
                var data = response.Data;

                _model.Id = data.Id;
                _model.FirstName = data.FirstName;
                _model.LastName = data.LastName;
                _model.Bio = data.Bio;
            }
        }
    }

    private async Task submit()
    {
        _message = string.Empty;

        if (Id > 0) //edit
        {
            var response = await _service.Edit(Id, _model);
            if (response.Success)
            {
                backToList();
            }
        }
        else
        {
            var response = await _service.Create(_model);
            if (response.Success)
            {
                backToList();
            }
            else
            {
                _message = response.Message;
            }
        }
    }

    private void backToList()
    {
        _navigationManager.NavigateTo("/authors");
    }
}
